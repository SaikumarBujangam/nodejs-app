name: CICD

on:
  push:
    branches:
      - main
      - feature/*

jobs:
  build:
    runs-on: [ ubuntu-latest ]
    permissions:
      id-token: write
      contents: read
    outputs:
      image: ${{ steps.build-image.outputs.image }}  # Set the output from the build-image step
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::941377113054:role/Logitech_Assume_Role
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: logitech/nodejs-app
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV  # Set the image in the environment
        outputs:
          image: ${{ env.image }}  # Use the image from the environment

  deploy:
    needs: build
    runs-on: [ ubuntu-latest ]
    permissions:
      id-token: write
      contents: read
    if: github.ref == 'refs/heads/main'  # Deploy only if pushed to 'main'
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::941377113054:role/Logitech_Assume_Role
          aws-region: ap-south-1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: nodejs-app-task-definition.json
          container-name: nodejs-app
          image: ${{ needs.build.outputs.image }}  # Use the output from the build job

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: nodejs-app-service
          cluster: LogitechCluster
          wait-for-service-stability: true
